"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CanvasAnimation = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
function CanvasAnimation(_a) {
    var move = _a.move, draw = _a.draw, onContextCreate = _a.onContextCreate, elementProps = __rest(_a, ["move", "draw", "onContextCreate"]);
    var canvas = (0, react_1.useRef)();
    var context = (0, react_1.useRef)();
    var updateContext = (0, react_1.useCallback)(function () {
        var _a;
        if ((_a = context.current) === null || _a === void 0 ? void 0 : _a.canvas) {
            context.current.canvas.width = window.innerWidth;
            context.current.canvas.height = window.innerHeight;
        }
        if (onContextCreate && context.current) {
            onContextCreate(context.current);
        }
    }, [context, onContextCreate]);
    // wrap in refs since it will be used as an animation frame callback
    var drawRef = (0, react_1.useRef)(move);
    var animatePointsRef = (0, react_1.useRef)(draw);
    var animationFrameIdRef = (0, react_1.useRef)(0);
    (0, react_1.useEffect)(function () {
        drawRef.current = move;
        animatePointsRef.current = draw;
    }, [move, drawRef, animatePointsRef, draw]);
    var loop = (0, react_1.useCallback)(function () {
        if (canvas.current && drawRef.current) {
            drawRef.current(canvas.current);
        }
        if (context.current) {
            animatePointsRef.current(context.current);
        }
        animationFrameIdRef.current = window.requestAnimationFrame(loop);
    }, [drawRef, animatePointsRef]);
    (0, react_1.useEffect)(function () {
        loop();
        return function () {
            window.cancelAnimationFrame(animationFrameIdRef.current);
        };
    }, []);
    (0, react_1.useEffect)(function () {
        var tempContext = canvas.current.getContext("2d");
        if (!tempContext)
            throw Error("Cannot create canvas context");
        context.current = tempContext;
        window.addEventListener("resize", updateContext);
        updateContext();
        return function () {
            window.removeEventListener("resize", updateContext);
        };
    }, [context, canvas, loop, updateContext]);
    return ((0, jsx_runtime_1.jsx)("canvas", __assign({ ref: canvas }, elementProps)));
}
exports.CanvasAnimation = CanvasAnimation;
