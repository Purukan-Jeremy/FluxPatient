"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MouseTrail = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var CanvasAnimation_1 = require("./CanvasAnimation");
var defaultStyle = {
    pointerEvents: "none",
    position: "fixed",
    width: "100vw",
    height: "100vh",
    zIndex: 2,
    top: 0,
    left: 0,
};
function MouseTrail(props) {
    var _a = props.lineDuration, lineDuration = _a === void 0 ? 1 : _a, _b = props.lineWidthStart, lineWidthStart = _b === void 0 ? 8 : _b, _c = props.strokeColor, strokeColor = _c === void 0 ? "rgb(".concat([255, 0, 0].join(', '), ")") : _c, _d = props.lag, lag = _d === void 0 ? 0.92 : _d, _e = props.style, style = _e === void 0 ? defaultStyle : _e, elementProps = __rest(props, ["lineDuration", "lineWidthStart", "strokeColor", "lag", "style"]);
    var MAX_AGE = lineDuration * 1000 / 60;
    var mouseLocation = (0, react_1.useRef)({ x: 0, y: 0 });
    var points = (0, react_1.useRef)([]);
    var updateMouse = (0, react_1.useCallback)(function (event) {
        mouseLocation.current = {
            x: event.clientX,
            y: event.clientY
        };
    }, [mouseLocation]);
    var makePath = (0, react_1.useCallback)(function (ctx, start, end, color, lineWeight) {
        ctx.lineWidth = lineWeight;
        ctx.strokeStyle = color;
        ctx.beginPath();
        ctx.moveTo(end.x, end.y);
        ctx.arcTo(start.x, start.y, end.x, end.y, 50);
        ctx.stroke();
        ctx.beginPath();
        ctx.fillStyle = color;
        ctx.arc(end.x, end.y, lineWeight / 2, 0, Math.PI * 2);
        ctx.fill();
    }, []);
    var draw = (0, react_1.useCallback)(function (ctx) {
        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
        points.current.forEach(function (point, i, arr) {
            var prevPoint = i ? arr[i - 1] : arr[i];
            point.age += 1;
            if (point.age > MAX_AGE) {
                points.current.splice(i, 1);
            }
            else {
                var lineWeight = lineWidthStart / (point.age * 2);
                makePath(ctx, point, prevPoint, strokeColor, lineWeight);
            }
        });
    }, [points, makePath, MAX_AGE, lineWidthStart, strokeColor]);
    var move = (0, react_1.useCallback)(function () {
        var mouse = mouseLocation.current;
        var lastPoint = points.current[points.current.length - 1] || mouse;
        var x = mouse.x - (mouse.x - lastPoint.x) * lag;
        var y = mouse.y - (mouse.y - lastPoint.y) * lag;
        points.current.push({ x: x, y: y, age: 0 });
    }, [mouseLocation, points, lag]);
    (0, react_1.useEffect)(function () {
        document.body.addEventListener('mousemove', updateMouse);
        return function () {
            window.removeEventListener('mousemove', updateMouse);
        };
    }, [updateMouse]);
    return ((0, jsx_runtime_1.jsx)(CanvasAnimation_1.CanvasAnimation, __assign({}, elementProps, { style: style, move: move, draw: draw, onContextCreate: function (ctx) {
            ctx.lineJoin = "round";
        } })));
}
exports.MouseTrail = MouseTrail;
